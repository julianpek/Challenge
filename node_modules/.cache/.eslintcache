[{"/Users/jpek/Documents/GitHub/challenge/src/index.js":"1","/Users/jpek/Documents/GitHub/challenge/src/App.js":"2","/Users/jpek/Documents/GitHub/challenge/src/components/UI/Button.js":"3","/Users/jpek/Documents/GitHub/challenge/src/components/Layout/NavBar.js":"4","/Users/jpek/Documents/GitHub/challenge/src/hooks/use-input.js":"5","/Users/jpek/Documents/GitHub/challenge/src/components/UI/Input.js":"6","/Users/jpek/Documents/GitHub/challenge/src/components/UI/Modal.js":"7","/Users/jpek/Documents/GitHub/challenge/src/components/CustomerTable/CustomerTable.js":"8","/Users/jpek/Documents/GitHub/challenge/src/components/CustomerTable/CustomerRow.js":"9","/Users/jpek/Documents/GitHub/challenge/src/components/EditModal/EditModal.js":"10","/Users/jpek/Documents/GitHub/challenge/src/components/UI/Container.js":"11","/Users/jpek/Documents/GitHub/challenge/src/components/UI/Select.js":"12","/Users/jpek/Documents/GitHub/challenge/src/data/channels.js":"13","/Users/jpek/Documents/GitHub/challenge/src/data/provinces.js":"14","/Users/jpek/Documents/GitHub/challenge/src/data/states.js":"15"},{"size":254,"mtime":1656190611923,"results":"16","hashOfConfig":"17"},{"size":1436,"mtime":1656687478207,"results":"18","hashOfConfig":"17"},{"size":352,"mtime":1656715688994,"results":"19","hashOfConfig":"17"},{"size":235,"mtime":1656737574101,"results":"20","hashOfConfig":"17"},{"size":594,"mtime":1656716150735,"results":"21","hashOfConfig":"17"},{"size":486,"mtime":1656608684446,"results":"22","hashOfConfig":"17"},{"size":761,"mtime":1656613221391,"results":"23","hashOfConfig":"17"},{"size":1479,"mtime":1656720727412,"results":"24","hashOfConfig":"17"},{"size":454,"mtime":1656718466674,"results":"25","hashOfConfig":"17"},{"size":7659,"mtime":1656721246570,"results":"26","hashOfConfig":"17"},{"size":220,"mtime":1656608684446,"results":"27","hashOfConfig":"17"},{"size":647,"mtime":1656721210532,"results":"28","hashOfConfig":"17"},{"size":104,"mtime":1656624223202,"results":"29","hashOfConfig":"17"},{"size":136,"mtime":1656616191446,"results":"30","hashOfConfig":"17"},{"size":444,"mtime":1656720405863,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"p8npka",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"35"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"/Users/jpek/Documents/GitHub/challenge/src/index.js",[],[],[],"/Users/jpek/Documents/GitHub/challenge/src/App.js",[],[],"/Users/jpek/Documents/GitHub/challenge/src/components/UI/Button.js",[],[],"/Users/jpek/Documents/GitHub/challenge/src/components/Layout/NavBar.js",[],[],"/Users/jpek/Documents/GitHub/challenge/src/hooks/use-input.js",[],[],"/Users/jpek/Documents/GitHub/challenge/src/components/UI/Input.js",[],[],"/Users/jpek/Documents/GitHub/challenge/src/components/UI/Modal.js",[],[],"/Users/jpek/Documents/GitHub/challenge/src/components/CustomerTable/CustomerTable.js",[],[],"/Users/jpek/Documents/GitHub/challenge/src/components/CustomerTable/CustomerRow.js",[],[],"/Users/jpek/Documents/GitHub/challenge/src/components/EditModal/EditModal.js",["79"],[],"import { useEffect } from 'react';\n\nimport Input from '../UI/Input';\nimport Button from '../UI/Button';\nimport Select from '../UI/Select';\nimport Modal from '../UI/Modal';\n\nimport useInput from '../../hooks/use-input';\n\nimport classes from './EditModal.module.css';\n\nimport states from '../../data/states';\nimport provinces from '../../data/provinces';\nimport channels from '../../data/channels';\n\nconst EditModal = props => {\n  const {\n    value: enteredName,\n    setEnteredValue: setEnteredName,\n    valueIsValid: nameIsValid,\n    hasError: nameHasError,\n    valueChangeHandler: nameChangeHandler,\n    valueBlurHandler: nameBlurHandler,\n  } = useInput(value => value.trim() !== '');\n\n  const {\n    value: enteredEmail,\n    valueIsValid: emailIsValid,\n    setEnteredValue: setEnteredEmail,\n    hasError: emailHasError,\n    valueChangeHandler: emailChangeHandler,\n    valueBlurHandler: emailBlurHandler,\n  } = useInput(value => {\n    const regex = /\\S+@\\S+\\.\\S+/;\n    const result = regex.test(value);\n    return result;\n  });\n\n  const {\n    value: enteredChannel,\n    setEnteredValue: setEnteredChannel,\n    valueIsValid: channelIsValid,\n    hasError: channelHasError,\n    valueChangeHandler: channelChangeHandler,\n    valueBlurHandler: channelBlurHandler,\n  } = useInput(value => value.trim() !== '');\n\n  const {\n    value: enteredAddress,\n    setEnteredValue: setEnteredAddress,\n    valueIsValid: addressIsValid,\n    hasError: addressHasError,\n    valueChangeHandler: addressChangeHandler,\n    valueBlurHandler: addressBlurHandler,\n  } = useInput(value => value);\n\n  const {\n    value: enteredPostalCode,\n    setEnteredValue: setEnteredPostalCode,\n    valueIsValid: postalCodeIsValid,\n    hasError: postalCodeHasError,\n    valueChangeHandler: postalCodeChangeHandler,\n    valueBlurHandler: postalCodeBlurHandler,\n  } = useInput(value => {\n    const regex = /^[A-Za-z]\\d[A-Za-z][ -]?\\d[A-Za-z]\\d$/;\n    const result = regex.test(value);\n    return result;\n  });\n\n  const {\n    value: enteredCity,\n    setEnteredValue: setEnteredCity,\n    valueIsValid: cityIsValid,\n    hasError: cityHasError,\n    valueChangeHandler: cityChangeHandler,\n    valueBlurHandler: cityBlurHandler,\n  } = useInput(value => value.trim() !== '');\n\n  const {\n    value: enteredProvince,\n    setEnteredValue: setEnteredProvince,\n    valueIsValid: provinceIsValid,\n    hasError: provinceHasError,\n    valueChangeHandler: provinceChangeHandler,\n    valueBlurHandler: provinceBlurHandler,\n  } = useInput(value => value.trim() !== '');\n\n  let isFormValid = false;\n\n  if (\n    nameIsValid &&\n    emailIsValid &&\n    channelIsValid &&\n    addressIsValid &&\n    postalCodeIsValid &&\n    cityIsValid &&\n    provinceIsValid\n  ) {\n    isFormValid = true;\n  }\n\n  const formSubmitHandler = e => {\n    e.preventDefault();\n    const editedData = {\n      id: props.customer.id,\n      name: enteredName,\n      email: enteredEmail,\n      channel: enteredChannel,\n      address: enteredAddress,\n      postal: enteredPostalCode,\n      city: enteredCity,\n      province: enteredProvince,\n      country: props.customer.country,\n    };\n\n    const payLoad = JSON.stringify(editedData);\n\n    console.log(payLoad);\n\n    props.backBtn(false);\n  };\n\n  useEffect(() => {\n    if (props.editing) {\n      setEnteredName(props.customer.name);\n      setEnteredEmail(props.customer.email);\n      setEnteredAddress(props.customer.address);\n      setEnteredPostalCode(props.customer.postal);\n      setEnteredCity(props.customer.city);\n      setEnteredChannel(props.customer.channel);\n      setEnteredProvince(props.customer.province);\n    }\n  }, []);\n\n  const nameClasses = nameHasError\n    ? `${classes.form_control__invalid}`\n    : `${classes.form_control}`;\n  const emailClasses = emailHasError\n    ? `${classes.form_control__invalid}`\n    : `${classes.form_control}`;\n  const channelClasses = channelHasError\n    ? `${classes.form_control__invalid}`\n    : `${classes.form_control}`;\n  const addressClasses = addressHasError\n    ? `${classes.form_control__invalid}`\n    : `${classes.form_control}`;\n  const postalCodeClasses = postalCodeHasError\n    ? `${classes.form_control__invalid}`\n    : `${classes.form_control}`;\n  const cityClasses = cityHasError\n    ? `${classes.form_control__invalid}`\n    : `${classes.form_control}`;\n  const provinceClasses = provinceHasError\n    ? `${classes.form_control__invalid}`\n    : `${classes.form_control}`;\n\n  return (\n    <Modal>\n      <div className={classes.form_container}>\n        <form onSubmit={formSubmitHandler}>\n          <Input\n            className={nameClasses}\n            labelName={'Name'}\n            type={'text'}\n            id={'name'}\n            onChange={nameChangeHandler}\n            onBlur={nameBlurHandler}\n            value={enteredName}\n            hasError={nameHasError}\n            paragraphClass={classes.error_text}\n          />\n          <Input\n            className={emailClasses}\n            labelName={'Email'}\n            type={'email'}\n            id={'email'}\n            onChange={emailChangeHandler}\n            onBlur={emailBlurHandler}\n            value={enteredEmail}\n            hasError={emailHasError}\n            paragraphClass={classes.error_text}\n          />\n          <Input\n            className={addressClasses}\n            labelName={'Address'}\n            type={'text'}\n            id={'address'}\n            onChange={addressChangeHandler}\n            onBlur={addressBlurHandler}\n            value={enteredAddress}\n            hasError={addressHasError}\n            paragraphClass={classes.error_text}\n          />\n          <Input\n            className={postalCodeClasses}\n            labelName={props.canadian ? 'Postal Code' : 'Zip Code'}\n            type={'text'}\n            id={props.canadian ? 'postal-code' : 'zip-code'}\n            onChange={postalCodeChangeHandler}\n            onBlur={postalCodeBlurHandler}\n            value={enteredPostalCode}\n            hasError={postalCodeHasError}\n            paragraphClass={classes.error_text}\n          />\n          <Input\n            className={cityClasses}\n            labelName={'City'}\n            type={'text'}\n            id={'city'}\n            onChange={cityChangeHandler}\n            onBlur={cityBlurHandler}\n            value={enteredCity}\n            hasError={cityHasError}\n            paragraphClass={classes.error_text}\n          />\n          <Select\n            className={provinceClasses}\n            labelName={props.canadian ? 'Province' : 'State'}\n            key={props.canadian ? 'province' : 'state'}\n            id={props.canadian ? 'province' : 'state'}\n            value={enteredProvince}\n            onChange={provinceChangeHandler}\n            onBlur={provinceBlurHandler}\n            hasError={provinceHasError}\n            paragraphClass={classes.error_text}\n            options={props.canadian ? provinces : states}\n            customer={props.customer.province}\n          />\n          <Select\n            className={channelClasses}\n            labelName={'Channel'}\n            key={'channel'}\n            id={'channel'}\n            value={enteredChannel}\n            onChange={channelChangeHandler}\n            onBlur={channelBlurHandler}\n            hasError={channelHasError}\n            paragraphClass={classes.error_text}\n            options={channels}\n            customer={props.customer.channel}\n          />\n          <div className={classes.button_container}>\n            <Button onClick={props.backBtn}>Back</Button>\n            <Button disabled={!isFormValid} type='save' isGreen={true}>\n              Save\n            </Button>\n          </div>\n        </form>\n      </div>\n    </Modal>\n  );\n};\n\nexport default EditModal;\n","/Users/jpek/Documents/GitHub/challenge/src/components/UI/Container.js",[],[],"/Users/jpek/Documents/GitHub/challenge/src/components/UI/Select.js",[],[],"/Users/jpek/Documents/GitHub/challenge/src/data/channels.js",[],[],"/Users/jpek/Documents/GitHub/challenge/src/data/provinces.js",[],[],"/Users/jpek/Documents/GitHub/challenge/src/data/states.js",[],[],{"ruleId":"80","severity":1,"message":"81","line":133,"column":6,"nodeType":"82","endLine":133,"endColumn":8,"suggestions":"83"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.customer.address', 'props.customer.channel', 'props.customer.city', 'props.customer.email', 'props.customer.name', 'props.customer.postal', 'props.customer.province', 'props.editing', 'setEnteredAddress', 'setEnteredChannel', 'setEnteredCity', 'setEnteredEmail', 'setEnteredName', 'setEnteredPostalCode', and 'setEnteredProvince'. Either include them or remove the dependency array.","ArrayExpression",["84"],{"desc":"85","fix":"86"},"Update the dependencies array to be: [props.customer.address, props.customer.channel, props.customer.city, props.customer.email, props.customer.name, props.customer.postal, props.customer.province, props.editing, setEnteredAddress, setEnteredChannel, setEnteredCity, setEnteredEmail, setEnteredName, setEnteredPostalCode, setEnteredProvince]",{"range":"87","text":"88"},[3584,3586],"[props.customer.address, props.customer.channel, props.customer.city, props.customer.email, props.customer.name, props.customer.postal, props.customer.province, props.editing, setEnteredAddress, setEnteredChannel, setEnteredCity, setEnteredEmail, setEnteredName, setEnteredPostalCode, setEnteredProvince]"]